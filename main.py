import telebot, os, logging
from telebot import types
from config import API_TOKEN
from quiz import quiz_data, ANIMAL_RESULTS, welcome_text, help_text, about_text, support_text, feedback_text


bot = telebot.TeleBot(API_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot_errors.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s'
)



# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, welcome_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, help_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about
@bot.message_handler(commands=['about'])
def send_about(message):
    bot.reply_to(message, about_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support
@bot.message_handler(commands=['support'])
def send_support(message):

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úâÔ∏è', url='https://moscowzoo.ru/contacts'))

    bot.reply_to(message, support_text, reply_markup=markup)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback
@bot.message_handler(commands=['feedback'])
def send_feedback(message):
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è", url="https://otzovik.com/reviews/moskovskiy_zoopark/"))

    bot.reply_to(message, feedback_text, reply_markup=markup)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
@bot.message_handler(commands=['quiz'])
def start_quiz(message):
    user_id = message.from_user.id
    user_data[user_id] = {
        'question_index': 0,
        'answers': [],
        'score': 0
    }
    ask_question(user_id, 0)


# –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
def ask_question(user_id, question_index):
    try:
        markup = create_markup(question_index)
        progress = get_progress(question_index)
        question_text = f"{progress}\n{quiz_data[question_index]['question']}"
        bot.send_message(user_id, question_text, reply_markup=markup)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ ask_question: {e}', exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
def create_markup(question_index):
    markup = types.InlineKeyboardMarkup()
    for option in quiz_data[question_index]['options']:
        markup.add(types.InlineKeyboardButton(text=option, callback_data=option))
    return markup


# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
def get_progress(question_index):
    total = len(quiz_data)
    return f"–í–æ–ø—Ä–æ—Å {question_index + 1}/{total} [{'‚≠ê' * (question_index + 1)}{'‚òÜ' * (total - question_index - 1)}]"



@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ /quiz")
        return

    current_data = user_data[user_id]
    question_index = current_data['question_index']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if call.data in quiz_data[question_index]['options']:
        answer_score = quiz_data[question_index]['scores'][
            quiz_data[question_index]['options'].index(call.data)
        ]
        current_data['answers'].append({
            'question': quiz_data[question_index]['question'],
            'answer': call.data,
            'score': answer_score
        })
        current_data['score'] += answer_score

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    question_index += 1
    current_data['question_index'] = question_index

    if question_index < len(quiz_data):
        ask_question(user_id, question_index)
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = generate_result(current_data['score'])
        send_result(user_id, result)
        del user_data[user_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    bot.answer_callback_query(call.id, "‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç")


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
def generate_result(total_score):
    try:
        if total_score >= 20:
            return ANIMAL_RESULTS["elephant"]
        elif total_score >= 17:
            return ANIMAL_RESULTS["eagle"]
        elif total_score >= 14:
            return ANIMAL_RESULTS["tiger"]
        elif total_score >= 11:
            return ANIMAL_RESULTS["lion"]
        elif total_score >= 8:
            return ANIMAL_RESULTS["kangaroo"]
        elif total_score >= 5:
            return ANIMAL_RESULTS["dolphin"]
        else:
            return ANIMAL_RESULTS["panda"]
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ generate_result: {e}', exc_info=True)
        return {
            'text' : "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        }


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
def send_result(user_id, result):
    try:
        image_path = os.path.join("images", result["image"])
        with open(image_path, 'rb') as photo:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è share
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(
                types.InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram üì§', url=f'https://t.me/share/url?url={result['text']}'),
                types.InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ üåê', url=f"https://vk.com/share.php?title={result['text']}")
            )
            markup.add(types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ', callback_data='quiz'))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot.send_photo(
                user_id,
                photo,
                caption=(
                    f"{result['text']}\n\n"
                    f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_data[user_id]['score']} –±–∞–ª–ª–æ–≤!\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã! üêæ\n"
                    "–ü–æ–¥–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–º —Ç–æ–∂–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–º –ø–æ–¥—Ö–æ–¥–∏—Ç!\n\n"
                    "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏! üêæ"
                ),
                reply_markup=markup
            )
    except FileNotFoundError:
        bot.send_message(
            user_id,
            (
                f"{result['text']}\n\n"
                f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_data[user_id]['score']} –±–∞–ª–ª–æ–≤!\n\n"
                "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ /quiz."
            ),
            reply_markup=markup
        )
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ send_result: {e}', exc_info=True)
        bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /quiz")




# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è callback_query
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    try:
        handle_button_click(call)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ callback_query: {e}', exc_info=True)
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.reply_to(
        message,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. üòÖ\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å!"
    )



if __name__ == '__main__':
    if not os.path.exists("images"):
        os.makedirs("images")
    bot.polling(non_stop=True)